"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[3743],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/use-card-input/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const useCardInputraw_namespaceObject='import React from "react";\nimport { useExpiryInput } from "../use-expiry-input";\nimport {\n  useInput,\n  useInputSiblings,\n  useIsFirstMount,\n  useSeparatorInput,\n} from "../use-input-siblings";\n\ninterface InputHanders {\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}\nexport interface CardValue {\n  cardName?: string;\n  cardNumber?: string;\n  expMonth?: number;\n  expYear?: number;\n  csc?: string;\n}\nexport interface UseCardInputOptions {\n  /**\n   * separator between card number\n   * @default " "\n   */\n  cardSeparator?: string;\n  /**\n   * If `true`, the input will be focused\n   */\n  autoFocus?: boolean;\n  /**\n   * If `true`, year will be in YYYY format\n   */\n  fullYear?: boolean;\n  /**\n   * initial value (don\'t use together with `value`)\n   */\n  defaultValue?: CardValue;\n  /**\n   * value for controlled input\n   */\n  value?: CardValue;\n  /**\n   * a callback function when input value changed\n   */\n  onChange?: (\n    value: CardValue,\n    meta: {\n      invalid: boolean;\n      invalidFields: {\n        ccName: boolean;\n        ccNumber: boolean;\n        ccExp: boolean;\n        ccSecurity: boolean;\n      };\n    }\n  ) => void;\n  /**\n   * a callback function when all inputs are not focused\n   */\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n}\n\nfunction chunk(str: string, n: number) {\n  let result = "";\n  str.split("").forEach((char, index) => {\n    result = `${result}${char}`;\n    if (index % n === 3) {\n      result = result + " "; // add separator\n    }\n  });\n  return result;\n}\n\nconst prependZero = (value: number | undefined) => {\n  if (!value) return "";\n  return value.toString().length === 1 ? `0${value}` : value;\n};\n\nconst parseCard = (value: CardValue | undefined) => {\n  if (!value) return { cardName: "", cardNumber: "", exp: "", csc: "" };\n  return {\n    cardName: value.cardName,\n    cardNumber: chunk(value.cardNumber || "", 4),\n    exp: value.expMonth\n      ? `${prependZero(value.expMonth)}/${value.expYear || ""}`\n      : "",\n    csc: value.csc || "",\n  };\n};\n\nexport const useCardInput = (options: UseCardInputOptions = {}) => {\n  const {\n    defaultValue,\n    value,\n    autoFocus = false,\n    fullYear = false,\n    cardSeparator = " ",\n  } = options;\n  const removeSeparator = (value: string) =>\n    value.replace(new RegExp(cardSeparator, "g"), "");\n  const parsedValue = parseCard(value || defaultValue);\n  const name = useInput({\n    autoFocus,\n    value: parsedValue.cardName,\n    maxLength: 26,\n    validator: (value) => value.length >= 2 && value.length <= 26,\n  });\n  const card = useSeparatorInput({\n    maxLength: [4, 4, 4, 4],\n    separator: cardSeparator,\n    value: parsedValue.cardNumber,\n    validator: (value) => new RegExp(/\\d{16}/).test(removeSeparator(value)),\n  });\n  const exp = useExpiryInput({\n    value: {\n      expMonth: value?.expMonth || defaultValue?.expMonth,\n      expYear: value?.expYear || defaultValue?.expYear,\n    },\n    fullYear,\n  });\n  const csc = useInput({\n    maxLength: 4,\n    value: parsedValue.csc,\n    validator: (value) => new RegExp(/^\\d{3,4}$/).test(value),\n  });\n\n  const [\n    getNameInputProps,\n    getCardInputProps,\n    getExpInputProps,\n    getCSCInputProps,\n  ] = useInputSiblings({\n    siblings: [name, card, exp, csc],\n    onBlur: options.onBlur,\n  });\n\n  const isFirstMount = useIsFirstMount();\n\n  React.useEffect(() => {\n    if (!isFirstMount) {\n      const [expMonth, expYear] = exp.value.split("/");\n      const result: CardValue = {\n        cardName: name.value,\n        cardNumber: removeSeparator(card.value),\n        expMonth: Number(expMonth) || undefined,\n        expYear: Number(expYear) || undefined,\n        csc: csc.value,\n      };\n      options.onChange?.(result, {\n        invalid: name.invalid || card.invalid || exp.invalid || csc.invalid,\n        invalidFields: {\n          ccName: name.invalid,\n          ccNumber: card.invalid,\n          ccExp: exp.invalid,\n          ccSecurity: csc.invalid,\n        },\n      });\n    }\n  }, [name.value, card.value, exp.value, csc.value]);\n\n  return {\n    getCardNameInputProps: (handlers?: InputHanders) => ({\n      size: 26,\n      type: "text",\n      placeholder: "Full Name",\n      autoComplete: "cc-name",\n      name: "ccname",\n      required: true,\n      ...getNameInputProps(handlers),\n    }),\n    getCardNumberInputProps: (handlers?: InputHanders) => ({\n      size: 19,\n      type: "tel",\n      name: "cardnumber",\n      inputMode: "numeric" as const,\n      autoComplete: "cc-number",\n      pattern:\n        "^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35d{3})d{11})$",\n      required: true,\n      ...getCardInputProps(handlers),\n    }),\n    getExpInputProps: (handlers?: InputHanders) => ({\n      size: fullYear ? 7 : 5,\n      type: "tel",\n      inputMode: "numeric" as const,\n      autoComplete: "cc-exp",\n      name: "ccexp",\n      placeholder: fullYear ? "MM/YYYY" : "MM/YY",\n      required: true,\n      ...getExpInputProps(handlers),\n    }),\n    getCSCInputProps: (handlers?: InputHanders) => ({\n      size: 4,\n      type: "tel",\n      inputMode: "numeric" as const,\n      name: "csc",\n      autoComplete: "cc-csc",\n      required: true,\n      ...getCSCInputProps(handlers),\n    }),\n  };\n};\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Hook/useCardInput"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone use-card-input use-input-siblings use-expiry-input\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usecardinput",children:"UseCardInput"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:useCardInputraw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);