"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[8272],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>MDXProvider,a:()=>useMDXComponents});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./blocks/info-basic/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const Inforaw_namespaceObject='import React from "react";\nimport { CSSObject, styled, SxProps, Theme } from "@mui/material/styles";\nimport cx from "clsx";\nimport { infoClasses } from "./infoClasses";\n\nconst defaultUseStyles = () => ({});\n\nexport interface InfoPropsVariantOverrides {}\n\nexport type InfoSlotStyles = {\n  root: CSSObject;\n  title: CSSObject;\n  subtitle: CSSObject;\n  caption: CSSObject;\n  eyebrow: CSSObject;\n};\n\nexport type AppendUseStyles<T> = T & {\n  useStyles: (theme: Theme) => Partial<InfoSlotStyles>;\n};\n\nexport type InfoProps = {\n  /**\n   * className append to the root element\n   */\n  className?: string;\n\n  component?: React.ElementType;\n\n  children: React.ReactNode;\n\n  variant?: unknown;\n\n  useStyles?: (theme: Theme) => Partial<InfoSlotStyles>;\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n} & Omit<JSX.IntrinsicElements["div"], "ref">;\n\nconst StylesContext = React.createContext<InfoProps["useStyles"] | undefined>(\n  undefined\n);\n\nexport const useStylesCtx = () => {\n  const value = React.useContext(StylesContext);\n  if (!value) {\n    throw new Error("`useStylesCtx` must be called under <Info>");\n  }\n  return value;\n};\n\nconst InfoRoot = styled("div", {\n  name: "JunInfo",\n  slot: "Root",\n  overridesResolver: (props, styles) => {\n    const { ownerState } = props;\n    return [styles.root, ownerState.variant && styles[ownerState.variant]];\n  },\n})<{ ownerState: InfoProps }>(({ theme, ownerState }) => ({\n  display: "block",\n  ...(ownerState.useStyles && ownerState.useStyles(theme).root),\n}));\n\nexport const Info = React.forwardRef<HTMLDivElement, InfoProps>(function Info(\n  props,\n  ref\n) {\n  const { children, component, variant, useStyles, ...other } = props;\n\n  const ownerState = {\n    ...props,\n    variant,\n    useStyles,\n  };\n\n  return (\n    <InfoRoot\n      ref={ref}\n      {...other}\n      as={component}\n      className={cx(infoClasses.root, props.className)}\n      ownerState={ownerState}\n    >\n      <StylesContext.Provider value={useStyles || defaultUseStyles}>\n        {children}\n      </StylesContext.Provider>\n    </InfoRoot>\n  );\n});\n',InfoCaptionraw_namespaceObject='import React, { ReactNode } from "react";\nimport { styled, Theme } from "@mui/material/styles";\nimport { SxProps } from "@mui/system";\nimport cx from "clsx";\nimport { AppendUseStyles, useStylesCtx } from "./Info";\nimport { infoClasses } from "./infoClasses";\n\nexport type InfoCaptionProps = {\n  /**\n   * className append to the root element\n   */\n  className?: string;\n\n  component?: React.ElementType;\n\n  children: ReactNode;\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n} & Omit<JSX.IntrinsicElements["div"], "ref">;\n\nconst InfoCaptionRoot = styled("div", {\n  name: "JunInfo",\n  slot: "Caption",\n  overridesResolver: (props, styles) => styles.caption,\n})<{ ownerState: AppendUseStyles<InfoCaptionProps> }>(\n  ({ theme, ownerState }) => ({\n    color: theme.palette.text.secondary,\n    fontSize: "0.75rem",\n    marginBlockStart: "0.5em",\n    marginBlockEnd: "0.75em",\n    ...ownerState.useStyles(theme).caption,\n  })\n);\n\nexport const InfoCaption = React.forwardRef<HTMLDivElement, InfoCaptionProps>(\n  function InfoCaption(props, ref) {\n    const { children, component, className, ...other } = props;\n    const useStyles = useStylesCtx();\n    return (\n      <InfoCaptionRoot\n        ref={ref}\n        {...other}\n        as={component}\n        className={cx(infoClasses.caption, className)}\n        ownerState={{ ...props, useStyles }}\n      >\n        {children}\n      </InfoCaptionRoot>\n    );\n  }\n);\n',infoClassesraw_namespaceObject='import generateUtilityClass from "@mui/material/generateUtilityClass";\nimport generateUtilityClasses from "@mui/material/generateUtilityClasses";\n\nexport interface InfoClasses {\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the title element. */\n  title: string;\n  /** Styles applied to the subtitle element. */\n  subtitle: string;\n  /** Styles applied to the caption element. */\n  caption: string;\n  /** Styles applied to the eyebrow element. */\n  eyebrow: string;\n}\n\nexport type InfoClassKey = keyof typeof infoClasses;\n\nexport function getInfoUtilityClass(slot: string) {\n  return generateUtilityClass("JunInfo", slot);\n}\n\nexport const infoClasses: InfoClasses = generateUtilityClasses("JunInfo", [\n  "root",\n  "title",\n  "subtitle",\n  "caption",\n  "eyebrow",\n]);\n',InfoSubtitleraw_namespaceObject='import React, { ReactNode } from "react";\nimport { styled, SxProps, Theme } from "@mui/material/styles";\nimport cx from "clsx";\nimport { AppendUseStyles, useStylesCtx } from "./Info";\nimport { infoClasses } from "./infoClasses";\n\nexport type InfoParagraphProps = {\n  /**\n   * className append to the root element\n   */\n  className?: string;\n\n  component?: React.ElementType;\n\n  children: ReactNode;\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n} & Omit<JSX.IntrinsicElements["p"], "ref">;\n\nconst InfoParagraphRoot = styled("p", {\n  name: "JunInfo",\n  slot: "Body",\n  overridesResolver: (props, styles) => styles.subtitle,\n})<{ ownerState: AppendUseStyles<InfoParagraphProps> }>(\n  ({ theme, ownerState }) => ({\n    color: theme.palette.text.secondary,\n    lineHeight: 1.5,\n    fontSize: "1rem",\n    margin: 0,\n    ...ownerState.useStyles(theme).subtitle,\n  })\n);\n\nexport const InfoSubtitle = React.forwardRef<\n  HTMLParagraphElement,\n  InfoParagraphProps\n>(function InfoSubtitle(props, ref) {\n  const { children, component, className, ...other } = props;\n  const useStyles = useStylesCtx();\n  return (\n    <InfoParagraphRoot\n      ref={ref}\n      {...other}\n      as={component}\n      className={cx(infoClasses.subtitle, className)}\n      ownerState={{ ...props, useStyles }}\n    >\n      {children}\n    </InfoParagraphRoot>\n  );\n});\n',InfoTitleraw_namespaceObject='import React, { ReactNode } from "react";\nimport { styled, SxProps, Theme } from "@mui/material/styles";\nimport cx from "clsx";\nimport { AppendUseStyles, useStylesCtx } from "./Info";\nimport { infoClasses } from "./infoClasses";\n\nexport type InfoTitleProps = {\n  /**\n   * className append to the root element\n   */\n  className?: string;\n\n  component?: React.ElementType;\n\n  children: ReactNode;\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n} & Omit<JSX.IntrinsicElements["div"], "ref">;\n\nconst InfoTitleRoot = styled("div", {\n  name: "JunInfo",\n  slot: "Head",\n  overridesResolver: (props, styles) => styles.title,\n})<{ ownerState: AppendUseStyles<InfoTitleProps> }>(\n  ({ theme, ownerState }) => ({\n    letterSpacing: "0.0073529412em",\n    fontSize: "1.25rem",\n    fontWeight: "normal",\n    margin: "0 0 0.4em 0", // force other side to prevent user agent stylesheet\n    lineHeight: 1.5,\n    ...ownerState.useStyles(theme).title,\n  })\n);\n\nexport const InfoTitle = React.forwardRef<HTMLHeadingElement, InfoTitleProps>(\n  function InfoTitle(props, ref) {\n    const { children, component, className, ...other } = props;\n    const useStyles = useStylesCtx();\n    return (\n      <InfoTitleRoot\n        ref={ref}\n        {...other}\n        as={component}\n        className={cx(infoClasses.title, className)}\n        ownerState={{ ...props, useStyles }}\n      >\n        {children}\n      </InfoTitleRoot>\n    );\n  }\n);\n';function _createMdxContent(props){const _components={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,lib.a)(),...props.components};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Info/Component"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone info-basic\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"infobasic",children:"InfoBasic"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"infotsx",children:(0,jsx_runtime.jsx)(_components.code,{children:"Info.tsx"})}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:Inforaw_namespaceObject,language:"tsx"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"infocaptiontsx",children:(0,jsx_runtime.jsx)(_components.code,{children:"InfoCaption.tsx"})}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:InfoCaptionraw_namespaceObject,language:"tsx"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"infosubtitletsx",children:(0,jsx_runtime.jsx)(_components.code,{children:"InfoSubtitle.tsx"})}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:InfoSubtitleraw_namespaceObject,language:"tsx"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"infotitletsx",children:(0,jsx_runtime.jsx)(_components.code,{children:"InfoTitle.tsx"})}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:InfoTitleraw_namespaceObject,language:"tsx"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"infoclassests",children:(0,jsx_runtime.jsx)(_components.code,{children:"infoClasses.ts"})}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:infoClassesraw_namespaceObject,language:"tsx"})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.a)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}}}]);