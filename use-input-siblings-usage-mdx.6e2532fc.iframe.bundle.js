"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[2278],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/use-input-siblings/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const useInputSiblingsraw_namespaceObject='import React from "react";\nimport { InputHanders } from "./types";\n\ninterface Sibling {\n  /**\n   * a fn that return input props\n   */\n  getInputProps: () => Partial<JSX.IntrinsicElements["input"]>;\n  /**\n   * a fn that provide access to the HTMLInputElement\n   */\n  getDOM: () => HTMLInputElement | null;\n  /**\n   * options that contain `maxLength`\n   */\n  options: {\n    maxLength: number | Array<number>;\n  };\n}\nexport interface UseInputSiblingsOptions {\n  siblings: Array<Sibling>;\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n}\n\nfunction getJumpLength(maxLength: Sibling["options"]["maxLength"]) {\n  if (typeof maxLength === "number") return maxLength;\n  return maxLength.reduce((total, num) => total + num) + maxLength.length - 1;\n}\nexport const useInputSiblings = (options: UseInputSiblingsOptions) => {\n  const { siblings } = options;\n  const blurEvent =\n    React.useRef<React.FocusEvent<HTMLInputElement> | undefined>(undefined);\n  const [unFocused, setUnFocused] = React.useState(false);\n\n  React.useEffect(() => {\n    if (unFocused) {\n      if (\n        siblings.every((input) => {\n          const DOM = input.getDOM();\n          return DOM && DOM.ownerDocument.activeElement !== DOM;\n        })\n      ) {\n        blurEvent.current && options?.onBlur?.(blurEvent.current);\n      }\n    }\n  }, [unFocused]);\n\n  return siblings.map((input, index) => {\n    return function (handlers?: InputHanders) {\n      const inputProps = input.getInputProps();\n      return {\n        ...inputProps,\n        onFocus: (event: React.FocusEvent<HTMLInputElement>) => {\n          handlers?.onFocus?.(event);\n          inputProps.onFocus?.(event);\n          setUnFocused(false);\n        },\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n          handlers?.onChange?.(event);\n          inputProps.onChange?.(event);\n          const { value } = event.target;\n          const jumpLength = getJumpLength(input.options.maxLength);\n          if (value.length === jumpLength) {\n            const nextDOM = siblings[index + 1]?.getDOM();\n            if (nextDOM) {\n              nextDOM.focus();\n              nextDOM.setSelectionRange(0, nextDOM.value.length);\n            }\n          }\n        },\n        onBlur: (event: React.FocusEvent<HTMLInputElement>) => {\n          handlers?.onBlur?.(event);\n          inputProps.onBlur?.(event);\n          blurEvent.current = event;\n          setUnFocused(true);\n        },\n        onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => {\n          handlers?.onKeyDown?.(event);\n          inputProps.onKeyDown?.(event);\n          if (index > 0) {\n            const DOM = siblings[index].getDOM();\n            if (event.code === "Backspace" && DOM && !DOM.value.length) {\n              siblings[index - 1].getDOM()?.focus();\n            }\n          }\n        },\n      };\n    };\n  });\n};\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"hook/useInputSiblings"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone use-input-siblings\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"useinputsiblings",children:"useInputSiblings"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:useInputSiblingsraw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);