"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[1178],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>MDXProvider,a:()=>useMDXComponents});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./blocks/color-scheme-select-icon/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const ColorSchemeSelectIconraw_namespaceObject='import React from "react";\nimport DarkModeIcon from "@mui/icons-material/DarkModeOutlined";\nimport LightModeIcon from "@mui/icons-material/LightModeOutlined";\nimport Box from "@mui/material/Box";\nimport IconButton from "@mui/material/IconButton";\nimport Menu from "@mui/material/Menu";\nimport MenuItem from "@mui/material/MenuItem";\nimport { useColorScheme } from "@mui/material/styles";\n\nexport function ColorSchemeSelectIcon() {\n  const { mode, systemMode, setMode } = useColorScheme();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleMode = (mode: "system" | "light" | "dark") => () => {\n    setMode(mode);\n    handleClose();\n  };\n  if (!mode) {\n    return (\n      <Box\n        sx={(theme) => {\n          // copy from OutlinedInput\n          const borderColor =\n            theme.palette.mode === "light"\n              ? "rgba(0, 0, 0, 0.23)"\n              : "rgba(255, 255, 255, 0.23)";\n          return {\n            verticalAlign: "bottom",\n            display: "inline-flex",\n            width: 40,\n            height: 40,\n            borderRadius: (theme.vars || theme).shape.borderRadius,\n            border: "1px solid",\n            borderColor: theme.vars\n              ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)`\n              : borderColor,\n          };\n        }}\n      />\n    );\n  }\n  const resolvedMode = (systemMode || mode) as "light" | "dark";\n  const icon = {\n    light: <LightModeIcon />,\n    dark: <DarkModeIcon />,\n  }[resolvedMode];\n  return (\n    <>\n      <IconButton\n        onClick={handleClick}\n        disableRipple\n        size="small"\n        sx={{\n          borderRadius: "4px",\n          "&:hover, &:focus": {\n            backgroundColor: "action.hover",\n          },\n        }}\n        aria-controls={open ? "color-scheme-menu" : undefined}\n        aria-haspopup="true"\n        aria-expanded={open ? "true" : undefined}\n      >\n        {icon}\n      </IconButton>\n      <Menu\n        anchorEl={anchorEl}\n        id="account-menu"\n        open={open}\n        onClose={handleClose}\n        onClick={handleClose}\n        slotProps={{\n          paper: {\n            variant: "outlined",\n            sx: {\n              my: "4px",\n            },\n          },\n        }}\n        transformOrigin={{ horizontal: "right", vertical: "top" }}\n        anchorOrigin={{ horizontal: "right", vertical: "bottom" }}\n      >\n        <MenuItem selected={mode === "system"} onClick={handleMode("system")}>\n          System\n        </MenuItem>\n        <MenuItem selected={mode === "light"} onClick={handleMode("light")}>\n          Light\n        </MenuItem>\n        <MenuItem selected={mode === "dark"} onClick={handleMode("dark")}>\n          Dark\n        </MenuItem>\n      </Menu>\n    </>\n  );\n}\n';function _createMdxContent(props){const _components={code:"code",h2:"h2",pre:"pre",...(0,lib.a)(),...props.components};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"ColorScheme/Select/Icon"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone color-scheme-select-icon\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"colorschemeselecticon",children:"ColorSchemeSelectIcon"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:ColorSchemeSelectIconraw_namespaceObject,language:"tsx"})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.a)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}}}]);