"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[4942],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/field-combo-basic/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const FieldComboBasicraw_namespaceObject='import React, { PropsWithChildren, ReactElement, useContext } from "react";\nimport useAutocomplete, {\n  AutocompleteGroupedOption,\n  UseAutocompleteProps,\n} from "@mui/material/useAutocomplete";\nimport {\n  ComboAnchor,\n  ComboFormControl,\n  ComboGroup,\n  ComboInput,\n  ComboLabel,\n  ComboList,\n  ComboOption,\n} from "./ComboBoxCompounds";\nimport { AnchorContext, ComboBoxContext } from "./ComboBoxContext";\n\nexport function ComboBox<\n  T,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false\n>({\n  children,\n  renderOptions,\n  renderGroupedOptions,\n  ...props\n}: PropsWithChildren<\n  Omit<\n    UseAutocompleteProps<T, false, DisableClearable, FreeSolo>,\n    "groupBy" | "multiple"\n  > &\n    (\n      | {\n          groupBy: (option: T) => string;\n          renderGroupedOptions: (\n            groupedOptions: {\n              key: number;\n              index: number;\n              group: string;\n              options: T[];\n            }[]\n          ) => ReactElement | null;\n          renderOptions?: never;\n        }\n      | {\n          groupBy?: never;\n          renderGroupedOptions?: never;\n          renderOptions: (options: T[]) => ReactElement | null;\n        }\n    )\n>) {\n  if (!props.getOptionLabel) {\n    throw new Error(\'"getOptionLabel" is required\');\n  }\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n    anchorEl,\n    setAnchorEl,\n    popupOpen,\n  } = useAutocomplete({\n    openOnFocus: true,\n    ...props,\n    // @ts-ignore\n    multiple: false,\n    componentName: "ComboBox",\n  });\n\n  const comboAnchor = useContext(AnchorContext);\n  return (\n    <ComboBoxContext.Provider\n      value={{\n        anchorEl: comboAnchor ?? anchorEl,\n        setAnchorEl,\n        popupOpen,\n        getRootProps,\n        getInputProps,\n        getInputLabelProps,\n        getListboxProps,\n        getOptionProps,\n      }}\n    >\n      {children}\n      {"groupBy" in props\n        ? renderGroupedOptions?.(\n            groupedOptions as AutocompleteGroupedOption<T>[]\n          )\n        : renderOptions?.(groupedOptions as T[])}\n    </ComboBoxContext.Provider>\n  );\n}\n\nComboBox.Anchor = ComboAnchor;\nComboBox.FormControl = ComboFormControl;\nComboBox.Label = ComboLabel;\nComboBox.Input = ComboInput;\nComboBox.List = ComboList;\nComboBox.Group = ComboGroup;\nComboBox.Option = ComboOption;\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Field/Combo/Basic"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone field-combo-basic\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"fieldcombobasic",children:"FieldComboBasic"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:FieldComboBasicraw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);