"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[5330],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/use-number-input/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const useNumberInputraw_namespaceObject='import React, { useEffect, useRef, useState } from "react";\nimport { useSpinner } from "./useSpinner";\n\ntype EventKeys =\n  | "ArrowDown"\n  | "ArrowUp"\n  | "ArrowLeft"\n  | "ArrowRight"\n  | "Enter"\n  | "Space"\n  | "Tab"\n  | "Backspace"\n  | "Control"\n  | "Meta"\n  | "Home"\n  | "End"\n  | "PageDown"\n  | "PageUp"\n  | "Delete"\n  | "Escape"\n  | " "\n  | "Shift";\n\ntype EventKeyMap = Partial<Record<EventKeys, React.KeyboardEventHandler>>;\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nfunction normalizeEventKey(event: Pick<KeyboardEvent, "key" | "keyCode">) {\n  const { key, keyCode } = event;\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf("Arrow") !== 0;\n\n  const eventKey = isArrowKey ? `Arrow${key}` : key;\n\n  return eventKey as EventKeys;\n}\n\nexport const minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;\nexport const maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\nexport interface BoundaryParams {\n  defaultValue?: number;\n  value?: number;\n  min?: number;\n  max?: number;\n}\n\nexport interface SpinParams {\n  precision?: number;\n  step?: number;\n}\n\nexport const toNumber = (value: string | undefined) => {\n  if (value === "") return undefined;\n  const result = Number(value);\n  return Number.isNaN(result) ? undefined : result;\n};\n\nexport const numberToString = (value: number | undefined, precision = 0) => {\n  const result = value?.toFixed(precision) ?? "";\n  if (result === "NaN") return "";\n  return result;\n};\n\nexport const getStepFactor = (\n  event: Partial<{ metaKey: boolean; ctrlKey: boolean; shiftKey: boolean }>,\n  step: number,\n  precision: number\n) => {\n  let ratio = 1;\n  if (event.metaKey || event.ctrlKey) {\n    ratio = 0.1;\n  }\n  if (event.shiftKey) {\n    ratio = 10;\n  }\n  let stepFactor = ratio * step;\n  if (stepFactor < 1 / Math.pow(10, precision)) {\n    stepFactor = step;\n  }\n  return stepFactor;\n};\n\nconst noop = <T>(value: T) => value;\n\nexport const useNumberBoundary = (options: UseNumberInputOptions = {}) => {\n  const {\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    defaultValue,\n    value,\n    precision = 0,\n    step = 1,\n    keepWithinRange = true,\n    formatter = noop,\n    parser = noop,\n  } = options;\n  const [interfaceValue, setInterfaceValue] = useState<string>(\n    formatter(numberToString(defaultValue, precision))\n  );\n  const numberValue = toNumber(parser(interfaceValue));\n\n  useEffect(() => {\n    if (defaultValue === undefined && value !== numberValue) {\n      setInterfaceValue(formatter(numberToString(value, precision)));\n    }\n  }, [value]);\n\n  function change(multiplier = 1, params: SpinParams = {}) {\n    setInterfaceValue((current) => {\n      const result =\n        (toNumber(parser(current)) ?? 0) + multiplier * (params.step ?? step);\n      const digits = params.precision ?? precision;\n      if (keepWithinRange) {\n        if (result > max) return max.toFixed(digits);\n        if (result < min) return min.toFixed(digits);\n      }\n      return formatter(result.toFixed(digits));\n    });\n  }\n\n  function increment(params: SpinParams = {}) {\n    change(1, params);\n  }\n\n  function decrement(params: SpinParams = {}) {\n    change(-1, params);\n  }\n\n  return {\n    numberValue,\n    interfaceValue,\n    setInterfaceValue: (value: string) => {\n      setInterfaceValue(formatter(value));\n    },\n    increment,\n    decrement,\n  };\n};\n\nexport type NumberInputEventType = "change" | "blur";\nexport type NumberInputError = "exceed-max" | "below-min";\nexport type UseNumberInputOptions = {\n  /**\n   * If true, the input\'s value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean;\n  /**\n   * This controls the value update when you blur out of the input. - If true and the value is greater than max, the value will be reset to max - Else, the value remains the same.\n   * @default true\n   */\n  clampValueOnBlur?: boolean;\n  /**\n   * This controls the value update behavior in general. - If true and you use the stepper or up/down arrow keys, the value will not exceed the max or go lower than min - If false, the value will be allowed to go out of range.\n   * @default true\n   */\n  keepWithinRange?: boolean;\n  /**\n   * If true, the input will be focused as you increment or decrement the value with the stepper\n   * @default true\n   */\n  focusInputOnChange?: boolean;\n  formatter?: (value: string) => string;\n  parser?: (value: string) => string;\n  /**\n   * a callback function when input value changed\n   */\n  onChange?: (\n    value: number | undefined,\n    metadata: {\n      error: NumberInputError | null;\n      eventType?: NumberInputEventType;\n      valueText?: string;\n    }\n  ) => void;\n} & BoundaryParams &\n  SpinParams;\n\ninterface InputHandlers {\n  onBlur: (event: React.FocusEvent<HTMLInputElement>) => void;\n  onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}\ninterface ButtonHandlers {\n  onTouchStart: (event: React.TouchEvent<HTMLButtonElement>) => void;\n  onTouchEnd: (event: React.TouchEvent<HTMLButtonElement>) => void;\n  onMouseDown: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onMouseUp: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onMouseLeave: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nfunction callAllHandlers<T>(\n  ...handlers: Array<undefined | ((event: T) => void)>\n) {\n  return (event: T) => {\n    handlers.forEach((handler) => {\n      if (typeof handler === "function") {\n        handler(event);\n      }\n    });\n  };\n}\n\nconst useIsFirstMount = () => {\n  const isFirstMount = useRef(true);\n  useEffect(() => {\n    isFirstMount.current = false;\n  }, []);\n  return isFirstMount.current;\n};\n\nfunction getError(\n  value: number | undefined,\n  min: number,\n  max: number\n): NumberInputError | null {\n  if (typeof value === "number") {\n    if (value < min) return "below-min";\n    if (value > max) return "exceed-max";\n  }\n  return null;\n}\n\nexport const useNumberInput = (options: UseNumberInputOptions = {}) => {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const {\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step = 1,\n    precision = 0,\n    focusInputOnChange = true,\n    keepWithinRange = true,\n    clampValueOnBlur = true,\n    allowMouseWheel = false,\n    parser = noop,\n    formatter = noop,\n    onChange,\n  } = options;\n  const {\n    interfaceValue,\n    setInterfaceValue,\n    numberValue,\n    increment,\n    decrement,\n  } = useNumberBoundary(options);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV !== "production") {\n      if (focusInputOnChange && !inputRef.current) {\n        console.warn(`Cannot find inputRef, make sure to pass it to <input /> like this ðŸ‘‡\n\nfunction NumberInput() {\n  const { inputRef } = useNumberInput(options)\n  return (\n    <input ref={inputRef} />\n  )\n}\n        `);\n      }\n    }\n    function handler(event: WheelEvent) {\n      const isInputFocused = document.activeElement === inputRef.current;\n      if (!allowMouseWheel || !isInputFocused) return;\n\n      event.preventDefault();\n\n      const stepFactor = getStepFactor(event as any, step, precision);\n      const direction = Math.sign(event.deltaY);\n\n      if (direction === -1) {\n        increment({ step: stepFactor });\n      } else if (direction === 1) {\n        decrement({ step: stepFactor });\n      }\n    }\n    document.addEventListener("wheel", handler);\n    return () => {\n      document.removeEventListener("wheel", handler);\n    };\n  }, [inputRef.current]);\n\n  const isFirstMount = useIsFirstMount();\n  useEffect(() => {\n    if (!isFirstMount) {\n      onChange?.(numberValue, {\n        valueText: interfaceValue,\n        error: getError(numberValue, min, max),\n        eventType: "change",\n      });\n    }\n  }, [interfaceValue]);\n\n  const tempInterfaceValue = useRef(interfaceValue);\n  const spinner = useSpinner(increment, decrement);\n\n  const spinUp = (event: React.MouseEvent | React.TouchEvent) => {\n    event.preventDefault();\n    spinner.up({ step: getStepFactor(event, step, precision) });\n    if (focusInputOnChange) inputRef.current?.focus();\n  };\n\n  const spinDown = (event: React.MouseEvent | React.TouchEvent) => {\n    event.preventDefault();\n    spinner.down({ step: getStepFactor(event, step, precision) });\n    if (focusInputOnChange) inputRef.current?.focus();\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    const stepFactor = getStepFactor(event, step, precision);\n    const keyMap: EventKeyMap = {\n      ArrowUp: () => increment({ step: stepFactor }),\n      ArrowDown: () => decrement({ step: stepFactor }),\n    };\n    const eventKey = normalizeEventKey(event);\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    tempInterfaceValue.current = interfaceValue;\n    const result = parser(event.target.value);\n    if (result.match(/^(-|\\+)?(0|[1-9]\\d*)?(\\.)?(\\d+)?$/)) {\n      setInterfaceValue(result);\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const parsedValue = parser(event.target.value);\n    if (parsedValue !== "") {\n      const nextNum = Number(parsedValue);\n      let result = "";\n      if (Number.isNaN(nextNum)) {\n        result = tempInterfaceValue.current;\n      } else {\n        result = nextNum.toFixed(precision);\n        if (clampValueOnBlur) {\n          if (nextNum > max) result = max.toFixed(precision);\n          if (nextNum < min) result = min.toFixed(precision);\n        }\n      }\n\n      setInterfaceValue(result);\n      onChange?.(Number(result), {\n        valueText: formatter(result),\n        error: getError(Number(result), min, max),\n        eventType: "blur",\n      });\n    } else {\n      onChange?.(undefined, {\n        valueText: "",\n        error: null,\n        eventType: "blur",\n      });\n    }\n  };\n\n  const incrementDisabled =\n    keepWithinRange && typeof numberValue === "number" && numberValue >= max;\n  const decrementDisabled =\n    keepWithinRange && typeof numberValue === "number" && numberValue <= min;\n  return {\n    inputRef,\n    getInputProps: (handlers?: Partial<InputHandlers>) => ({\n      pattern: "[0-9]*(.[0-9]+)?",\n      role: "spinbutton",\n      "aria-valuemin": min,\n      "aria-valuemax": max,\n      autoComplete: "off",\n      autoCorrect: "off",\n      "aria-valuetext": interfaceValue,\n      "aria-valuenow": numberValue,\n      value: interfaceValue,\n      onChange: handleChange,\n      onBlur: callAllHandlers(handleBlur, handlers?.onBlur),\n      onKeyDown: callAllHandlers(handleKeyDown, handlers?.onKeyDown),\n    }),\n    getIncrementProps: (handlers?: Partial<ButtonHandlers>) => ({\n      tabIndex: -1,\n      ...(typeof window !== "undefined" &&\n      !!document.documentElement.ontouchstart\n        ? {\n            onTouchStart: callAllHandlers(spinUp, handlers?.onTouchStart),\n          }\n        : {\n            onMouseDown: callAllHandlers(spinUp, handlers?.onMouseDown),\n          }),\n      onMouseUp: callAllHandlers(spinner.stop, handlers?.onMouseUp),\n      onMouseLeave: callAllHandlers(spinner.stop, handlers?.onMouseLeave),\n      onTouchEnd: callAllHandlers(spinner.stop, handlers?.onTouchEnd),\n      disabled: incrementDisabled,\n      "aria-disabled": incrementDisabled ? true : undefined,\n    }),\n    getDecrementProps: (handlers?: Partial<ButtonHandlers>) => ({\n      tabIndex: -1,\n      ...(typeof window !== "undefined" &&\n      !!document.documentElement.ontouchstart\n        ? {\n            onTouchStart: callAllHandlers(spinDown, handlers?.onTouchStart),\n          }\n        : {\n            onMouseDown: callAllHandlers(spinDown, handlers?.onMouseDown),\n          }),\n      onMouseUp: callAllHandlers(spinner.stop, handlers?.onMouseUp),\n      onMouseLeave: callAllHandlers(spinner.stop, handlers?.onMouseLeave),\n      onTouchEnd: callAllHandlers(spinner.stop, handlers?.onTouchEnd),\n      disabled: decrementDisabled,\n      "aria-disabled": decrementDisabled ? true : undefined,\n    }),\n  };\n};\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Hook/useNumberInput"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone use-number-input\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usenumberinput",children:"UseNumberInput"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:useNumberInputraw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);