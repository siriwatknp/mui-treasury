"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[9308],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>MDXProvider,a:()=>useMDXComponents});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./blocks/layout-v6-app-claude/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const LayoutV6AppClauderaw_namespaceObject='import React from "react";\nimport Close from "@mui/icons-material/Close";\nimport Menu from "@mui/icons-material/Menu";\nimport TuneIcon from "@mui/icons-material/Tune";\nimport Avatar from "@mui/material/Avatar";\nimport Box from "@mui/material/Box";\nimport Card from "@mui/material/Card";\nimport IconButton from "@mui/material/IconButton";\nimport { styled } from "@mui/material/styles";\nimport {\n  applyEdgeSidebarRightStyles,\n  applyEdgeSidebarStyles,\n  applyHeaderStyles,\n  applyRootStyles,\n  Content,\n  EdgeSidebar,\n  EdgeSidebarContent,\n  EdgeSidebarRight,\n  Footer,\n  Header,\n  layoutClasses,\n  Root,\n  toggleEdgeSidebarRightCollapse,\n  toggleTemporaryEdgeSidebar,\n  toggleTemporaryEdgeSidebarRight,\n} from "../layout-core-v6";\n\nexport function LayoutV6AppClaude() {\n  return (\n    <Root\n      sx={{\n        backgroundColor: "#f5f5f5",\n        "--EdgeSidebar-sidelineWidth": "0px",\n        "--EdgeSidebarContent-shadow": "none",\n        ...applyRootStyles({ height: "100vh", fixedHeight: true }),\n      }}\n    >\n      <Header\n        sx={{\n          ...applyHeaderStyles({\n            fullWidth: true,\n            height: "56px",\n          }),\n        }}\n      >\n        <IconButton\n          className="EdgeSidebar-trigger"\n          onClick={() => toggleTemporaryEdgeSidebar()}\n        >\n          <Menu />\n        </IconButton>\n        Header\n        <IconButton\n          className={layoutClasses.TemporaryEdgeSidebarRightTrigger}\n          sx={{ ml: "auto" }}\n          onClick={() => {\n            toggleTemporaryEdgeSidebarRight();\n          }}\n        >\n          <TuneIcon />\n        </IconButton>\n        <IconButton\n          className={layoutClasses.EdgeSidebarRightCollapser}\n          sx={{ ml: "auto" }}\n          onClick={(event) => {\n            toggleEdgeSidebarRightCollapse({ event });\n          }}\n        >\n          <TuneIcon />\n        </IconButton>\n      </Header>\n      <Content sx={{ overflow: "auto" }}>\n        <Box sx={{ maxWidth: 400, px: 2, pt: 0.5, mx: "auto" }}>\n          <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>\n            {[...Array(20)].map((_, index) => (\n              <Card\n                elevation={0}\n                variant="outlined"\n                key={index}\n                sx={{ height: 300 }}\n              ></Card>\n            ))}\n          </Box>\n        </Box>\n      </Content>\n      <EdgeSidebar\n        sx={(theme) => ({\n          ...applyEdgeSidebarStyles({\n            theme,\n            config: {\n              xs: {\n                variant: "temporary",\n                fullHeight: true,\n              },\n              sm: {\n                variant: "permanent",\n                width: "288px",\n                autoCollapse: 9999,\n                collapsedWidth: "56px",\n                expandOnHover: true,\n              },\n            },\n          }),\n          "&::before": {\n            display: "none",\n          },\n        })}\n      >\n        <EdgeSidebarContent\n          sx={{\n            background: "none",\n            marginTop: "var(--permanent, calc(-1 * var(--Header-height)))",\n            containerType: "inline-size",\n          }}\n        >\n          <Box\n            sx={{\n              border: "1px solid",\n              borderColor: "divider",\n              backgroundColor: "rgba(0 0 0 / 0.12)",\n              height: "100%",\n              m: 1,\n              borderRadius: "8px",\n              backdropFilter: "blur(4px)",\n              opacity: {\n                "@": 0,\n                "@100": 1,\n              },\n              transition: "opacity 0.3s",\n            }}\n          >\n            <Box sx={{ textAlign: "right", p: 1 }}>\n              <IconButton\n                className="EdgeSidebar-trigger"\n                onClick={() => toggleTemporaryEdgeSidebar()}\n              >\n                <Close />\n              </IconButton>\n            </Box>\n          </Box>\n          <Box sx={{ position: "fixed", bottom: "1rem", left: "1rem" }}>\n            <Avatar />\n          </Box>\n        </EdgeSidebarContent>\n      </EdgeSidebar>\n      <EdgeSidebarRight\n        sx={(theme) => ({\n          ...applyEdgeSidebarRightStyles({\n            theme,\n            config: {\n              xs: {\n                variant: "temporary",\n                // ถ้าจอเล็กกว่า 720px ให้ width = 100vw\n                // ถ้าจอใหญ่กว่า 720px ให้ width = 420px\n                width: "clamp(420px, (720px - 100vw) * 9999, 100vw)",\n              },\n              md: {\n                variant: "permanent",\n                width: "420px",\n                collapsedWidth: "0px",\n              },\n            },\n          }),\n          "&::before": {\n            display: "none",\n          },\n        })}\n      >\n        <EdgeSidebarContent sx={{ background: "none" }}>\n          <Box\n            sx={{\n              border: "1px solid",\n              borderColor: "divider",\n              backgroundColor: "rgba(0 0 0 / 0.12)",\n              m: 1,\n              height: {\n                xs: "calc(100% - var(--Header-height) - 16px)",\n                md: "100%",\n              },\n              borderRadius: "8px",\n              backdropFilter: "blur(4px)",\n            }}\n          >\n            <Box sx={{ textAlign: "right", p: 1 }}>\n              <IconButton\n                className={layoutClasses.TemporaryEdgeSidebarRightTrigger}\n                onClick={() => toggleTemporaryEdgeSidebarRight()}\n              >\n                <Close />\n              </IconButton>\n              <IconButton\n                className={layoutClasses.EdgeSidebarRightCollapser}\n                onClick={(event) =>\n                  toggleEdgeSidebarRightCollapse({\n                    event,\n                  })\n                }\n              >\n                <Close />\n              </IconButton>\n            </Box>\n          </Box>\n        </EdgeSidebarContent>\n      </EdgeSidebarRight>\n      <Footer sx={{ background: "unset", border: "none" }}>\n        <Box\n          sx={{\n            maxWidth: 400,\n            p: "10px 10px 10px 16px",\n            mx: "auto",\n            display: "flex",\n            flexDirection: "column",\n            gap: 1,\n            border: "1px solid",\n            borderColor: "divider",\n            borderBottomWidth: 0,\n            borderTopLeftRadius: 16,\n            borderTopRightRadius: 16,\n          }}\n        >\n          <Box\n            component="input"\n            placeholder="Reply to Claude"\n            sx={{\n              backgroundColor: "initial",\n              height: 28,\n              width: "100%",\n              "&:focus": {\n                outline: "none",\n              },\n            }}\n          />\n          <div style={{ fontSize: "0.875rem" }}>Claude 3.5 Sonnet</div>\n        </Box>\n      </Footer>\n    </Root>\n  );\n}\n';function _createMdxContent(props){const _components={code:"code",h2:"h2",pre:"pre",...(0,lib.a)(),...props.components};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"LayoutV6/App/Claude"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone layout-v6-app-claude\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"layoutv6appclaude",children:"LayoutV6AppClaude"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:LayoutV6AppClauderaw_namespaceObject,language:"tsx"})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.a)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}}}]);