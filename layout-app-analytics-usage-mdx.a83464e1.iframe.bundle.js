"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[5685],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/layout-app-analytics/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const LayoutAppAnalyticsraw_namespaceObject='import React from "react";\nimport KeyboardArrowLeftRounded from "@mui/icons-material/KeyboardArrowLeftRounded";\nimport KeyboardArrowRightRounded from "@mui/icons-material/KeyboardArrowRightRounded";\nimport MenuRounded from "@mui/icons-material/MenuRounded";\nimport Box from "@mui/material/Box";\nimport ButtonBase from "@mui/material/ButtonBase";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport Grid from "@mui/material/Grid";\nimport IconButton from "@mui/material/IconButton";\nimport { alpha, createTheme, ThemeProvider } from "@mui/material/styles";\nimport Tab from "@mui/material/Tab";\nimport Typography from "@mui/material/Typography";\nimport useScrollTrigger from "@mui/material/useScrollTrigger";\nimport {\n  Content,\n  EdgeSidebar,\n  EdgeTrigger,\n  Header,\n  Root,\n  SidebarContent,\n  Subheader,\n} from "../layout-core";\nimport {\n  IconNavMockup,\n  LinkNavMockup,\n  SideNavUserInfoMockup,\n  StatCardMockup,\n  TopUsersCardMockup,\n  UserActiveCardMockup,\n} from "../mockup-dashboard";\nimport { UnderlineTabs } from "../mockup-tabs";\nimport { Word } from "../mockup-typography";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: "#0064FE",\n    },\n    error: {\n      main: "#FD3E5B",\n    },\n    grey: {\n      50: "#f8fafc",\n      100: "#f1f5f9",\n      200: "#e2e8f0",\n      300: "#cbd5e1",\n      400: "#94a3b8",\n      500: "#64748b",\n      600: "#475569",\n      700: "#334155",\n      800: "#1e293b",\n      900: "#0f172a",\n    },\n  },\n});\n\nexport const LayoutAppAnalytics = () => {\n  const [tabIndex, setTabIndex] = React.useState(0);\n  const trigger = useScrollTrigger({\n    threshold: 0,\n    disableHysteresis: true,\n  });\n  return (\n    <ThemeProvider theme={theme}>\n      <Root\n        scheme={{\n          header: {\n            config: {\n              xs: {\n                position: "sticky",\n                height: 48,\n              },\n              sm: {\n                position: "sticky",\n                height: 64,\n              },\n              md: {\n                position: "sticky",\n                height: 72,\n              },\n            },\n          },\n          subheader: {\n            config: {\n              xs: {\n                position: "sticky",\n                height: 44,\n              },\n              sm: {\n                position: "sticky",\n                height: 44,\n              },\n              md: {\n                position: "sticky",\n                height: 48,\n              },\n            },\n          },\n          leftEdgeSidebar: {\n            autoCollapse: "md",\n            config: {\n              xs: {\n                variant: "temporary",\n                width: "100vw",\n              },\n              md: {\n                variant: "permanent",\n                width: 256,\n                collapsible: true,\n                collapsedWidth: 72,\n                uncollapsedOnHover: true,\n              },\n            },\n          },\n        }}\n      >\n        <CssBaseline />\n        <Header\n          sx={{\n            bgcolor: "rgba(255,255,255,0.5)",\n            backdropFilter: "blur(12px)",\n            ...(trigger && {\n              transition: "0.2s",\n              boxShadow: "0 0 4px 0 #e2e8f0",\n              "&:before": {\n                content: \'""\',\n                position: "absolute",\n                display: "block",\n                width: "100%",\n                height: "1px",\n                bgcolor: "grey.200",\n                bottom: 0,\n              },\n            }),\n          }}\n        >\n          <Box\n            sx={{\n              px: { xs: 1, md: 2.5 },\n              display: "flex",\n              alignItems: "center",\n              gap: 1,\n              height: { xs: 52, sm: 64, md: 72 },\n            }}\n          >\n            <EdgeTrigger target={{ anchor: "left", field: "open" }}>\n              {(open, setOpen) => (\n                <IconButton onClick={() => setOpen(!open)}>\n                  <MenuRounded />\n                </IconButton>\n              )}\n            </EdgeTrigger>\n            <Typography\n              variant="h6"\n              sx={{ fontSize: "clamp(18px, 1vw + 1rem, 24px)" }}\n            >\n              <b>Analytics</b>\n            </Typography>\n          </Box>\n        </Header>\n        <Subheader>\n          <UnderlineTabs\n            value={tabIndex}\n            onChange={(event, index) => setTabIndex(index)}\n            sx={{\n              minHeight: { xs: 44, md: 48 },\n              px: 2,\n              "& .MuiTab-root": {\n                minHeight: { xs: 44, md: 48 },\n                minWidth: 0,\n                fontSize: { md: 16 },\n              },\n            }}\n          >\n            <Tab label={<Word cached />} disableTouchRipple />\n            <Tab label={<Word cached />} disableTouchRipple />\n            <Tab label={<Word cached />} disableTouchRipple />\n          </UnderlineTabs>\n        </Subheader>\n        <EdgeSidebar\n          anchor="left"\n          PaperProps={{\n            sx: {\n              overflow: "visible",\n              maxWidth: 375,\n              "&.AppEdgeSidebar-paperExpanded": {\n                boxShadow: `0 0 12px 0 ${alpha("#64748b", 0.2)}`,\n              },\n            },\n          }}\n        >\n          <EdgeTrigger\n            target={{ anchor: "left", field: "open" }}\n            sx={{\n              position: "absolute",\n              top: 48,\n              right: { xs: 8, sm: -24 },\n              zIndex: 1,\n            }}\n          >\n            {(open, setOpen) => (\n              <IconButton\n                onClick={() => setOpen(!open)}\n                sx={{\n                  bgcolor: "background.paper",\n                  border: "1px solid",\n                  borderColor: "grey.200",\n                  boxShadow: "0 1px 4px 0 rgba(0,0,0,0.12)",\n                  "&:hover": {\n                    bgcolor: "#f5f5f5",\n                  },\n                }}\n              >\n                <KeyboardArrowLeftRounded />\n              </IconButton>\n            )}\n          </EdgeTrigger>\n          <SidebarContent>\n            <SideNavUserInfoMockup />\n            <Box\n              sx={{\n                borderTop: "1px solid",\n                borderColor: "grey.200",\n                display: "flex",\n                height: "100%",\n              }}\n            >\n              <IconNavMockup size="small" />\n              <LinkNavMockup />\n            </Box>\n          </SidebarContent>\n          <EdgeTrigger target={{ anchor: "left", field: "collapsed" }}>\n            {(collapsed, setCollapsed) => (\n              <ButtonBase\n                onClick={() => setCollapsed(!collapsed)}\n                sx={{\n                  height: 48,\n                  width: "100%",\n                  borderTop: "1px solid",\n                  borderColor: "grey.200",\n                }}\n              >\n                {collapsed ? (\n                  <KeyboardArrowRightRounded />\n                ) : (\n                  <KeyboardArrowLeftRounded />\n                )}\n              </ButtonBase>\n            )}\n          </EdgeTrigger>\n        </EdgeSidebar>\n        <Content>\n          <Box\n            sx={{\n              height: "16vh",\n              minHeight: 240,\n              borderRadius: 2,\n              bgcolor: "#eaeff7",\n              m: 2,\n            }}\n          />\n          <Box sx={{ px: 2 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6} md={8} container spacing={2}>\n                <Grid item xs={6}>\n                  <StatCardMockup />\n                </Grid>\n                <Grid item xs={6}>\n                  <StatCardMockup />\n                </Grid>\n                <Grid item xs={6}>\n                  <StatCardMockup />\n                </Grid>\n                <Grid item xs={6}>\n                  <StatCardMockup />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <UserActiveCardMockup />\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TopUsersCardMockup sx={{ height: "100%" }} />\n              </Grid>\n            </Grid>\n          </Box>\n          <br />\n          <br />\n          <br />\n        </Content>\n      </Root>\n    </ThemeProvider>\n  );\n};\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Layout/App/Analytics"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone layout-app-analytics\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"layoutappanalytics",children:"LayoutAppAnalytics"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:LayoutAppAnalyticsraw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);