"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[1433],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>MDXProvider,a:()=>useMDXComponents});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./blocks/use-pin-input/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const usePinInputraw_namespaceObject='import React from "react";\nimport { useInput, useInputSiblings, useIsFirstMount } from "../use-input-siblings";\nconst numberValidator = value => new RegExp(/\\d/).test(value);\nconst alphanumericValidator = value => new RegExp(/[a-zA-Z0-9]/).test(value);\nexport const usePinInput = (options = {}) => {\n  const {\n    pinLength = 4,\n    defaultValue,\n    value,\n    type = "number",\n    mask = false\n  } = options;\n  const validator = type === "number" ? numberValidator : alphanumericValidator;\n  const splittedValue = (value || defaultValue || "").split("");\n  const siblings = [...Array(pinLength).fill(undefined)].map((_, index) => useInput({\n    autoFocus: options.autoFocus && index === 0,\n    maxLength: 1,\n    validator,\n    value: splittedValue[index]\n  }));\n  const isFirstMount = useIsFirstMount();\n  const pinArray = siblings.map(({\n    value\n  }) => value);\n  React.useEffect(() => {\n    if (!isFirstMount) {\n      options.onChange?.(pinArray.join(""), {\n        invalid: siblings.some(pinInput => pinInput.invalid)\n      });\n    }\n  }, pinArray);\n  const pins = useInputSiblings({\n    siblings,\n    onBlur: options?.onBlur\n  });\n  return {\n    pins: pins.map(getInputProps => {\n      return handlers => {\n        const inputProps = getInputProps(handlers);\n        return {\n          "aria-label": "Please enter your pin code",\n          size: 1,\n          type: mask ? "password" : "tel",\n          pattern: "d",\n          placeholder: "â—‹",\n          inputMode: "numeric",\n          autoComplete: options.otp ? "one-time-code" : "off",\n          ...inputProps,\n          onChange: event => {\n            let inputValue = event.target.value;\n            if (inputValue.length > 2) {\n              inputValue = inputValue[0] === inputProps.value ? inputValue.slice(1) : inputValue.substring(-1);\n              handlers?.onChange?.(event);\n              // copy & paste\n              const valueArray = inputValue.split("").filter(validator).slice(0, siblings.length);\n              valueArray.forEach((val, index) => {\n                siblings[index].setValue(val);\n              });\n              const nextInput = siblings[Math.min(valueArray.length, siblings.length - 1)].getDOM();\n              if (nextInput) nextInput.focus();\n            } else {\n              inputProps.onChange(event);\n            }\n          }\n        };\n      };\n    })\n  };\n};';function _createMdxContent(props){const _components={code:"code",h2:"h2",pre:"pre",...(0,lib.a)(),...props.components};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Hook/usePinInput"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone use-pin-input use-input-siblings\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usepininput",children:"UsePinInput"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:usePinInputraw_namespaceObject,language:"tsx"})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.a)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}}}]);