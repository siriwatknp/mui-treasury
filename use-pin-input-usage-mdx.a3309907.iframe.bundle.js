"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[1433],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/use-pin-input/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const usePinInputraw_namespaceObject='import React from "react";\nimport {\n  InputHanders,\n  useInput,\n  useInputSiblings,\n  useIsFirstMount,\n} from "../use-input-siblings";\n\nconst numberValidator = (value: string) => new RegExp(/\\d/).test(value);\nconst alphanumericValidator = (value: string) =>\n  new RegExp(/[a-zA-Z0-9]/).test(value);\n\nexport interface UsePinInputOptions {\n  /**\n   * If `true`, the input will be focused\n   */\n  autoFocus?: boolean;\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: "number" | "alphanumeric";\n  /**\n   * If `true`, the input\'s value will be masked just like `type=password`\n   */\n  mask?: boolean;\n  /**\n   * If `true`, the pin input component signals to its fields that they should use `autocomplete="one-time-code"`.\n   */\n  otp?: boolean;\n  /**\n   * number of pin inputs (this number should never change between render)\n   */\n  pinLength?: number;\n  /**\n   * initial value (don\'t use together with `value`)\n   */\n  defaultValue?: string;\n  /**\n   * value for controlled input\n   */\n  value?: string;\n  /**\n   * a callback function when input value changed\n   */\n  onChange?: (value: string, meta: { invalid: boolean }) => void;\n  /**\n   * a callback function when all inputs are not focused\n   */\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n}\n\nexport const usePinInput = (options: UsePinInputOptions = {}) => {\n  const {\n    pinLength = 4,\n    defaultValue,\n    value,\n    type = "number",\n    mask = false,\n  } = options;\n  const validator = type === "number" ? numberValidator : alphanumericValidator;\n  const splittedValue = (value || defaultValue || "").split("");\n  const siblings = [...Array(pinLength).fill(undefined)].map((_, index) =>\n    useInput({\n      autoFocus: options.autoFocus && index === 0,\n      maxLength: 1,\n      validator,\n      value: splittedValue[index],\n    })\n  );\n\n  const isFirstMount = useIsFirstMount();\n  const pinArray = siblings.map(({ value }) => value);\n  React.useEffect(() => {\n    if (!isFirstMount) {\n      options.onChange?.(pinArray.join(""), {\n        invalid: siblings.some((pinInput) => pinInput.invalid),\n      });\n    }\n  }, pinArray);\n\n  const pins = useInputSiblings({\n    siblings,\n    onBlur: options?.onBlur,\n  });\n\n  return {\n    pins: pins.map((getInputProps) => {\n      return (handlers?: InputHanders) => {\n        const inputProps = getInputProps(handlers);\n        return {\n          "aria-label": "Please enter your pin code",\n          size: 1,\n          type: mask ? "password" : "tel",\n          pattern: "d",\n          placeholder: "â—‹",\n          inputMode: "numeric" as const,\n          autoComplete: options.otp ? "one-time-code" : "off",\n          ...inputProps,\n          onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n            let inputValue = event.target.value;\n            if (inputValue.length > 2) {\n              inputValue =\n                inputValue[0] === inputProps.value\n                  ? inputValue.slice(1)\n                  : inputValue.substring(-1);\n              handlers?.onChange?.(event);\n              // copy & paste\n              const valueArray = inputValue\n                .split("")\n                .filter(validator)\n                .slice(0, siblings.length);\n              valueArray.forEach((val, index) => {\n                siblings[index].setValue(val);\n              });\n              const nextInput =\n                siblings[\n                  Math.min(valueArray.length, siblings.length - 1)\n                ].getDOM();\n              if (nextInput) nextInput.focus();\n            } else {\n              inputProps.onChange(event);\n            }\n          },\n        };\n      };\n    }),\n  };\n};\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Hook/usePinInput"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone use-pin-input use-input-siblings\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usepininput",children:"UsePinInput"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:usePinInputraw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);