"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[7828],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/info-n01/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const InfoN01raw_namespaceObject='import React from "react";\nimport { Info, InfoEyebrow, InfoSubtitle, InfoTitle } from "../info-basic";\nimport { getInfoN01Styles } from "./InfoN01.styles";\n\nexport function InfoN01() {\n  return (\n    <Info variant="n01" useStyles={getInfoN01Styles}>\n      <InfoEyebrow>March 20, 2019</InfoEyebrow>\n      <InfoTitle>Nature Around Us</InfoTitle>\n      <InfoSubtitle>\n        We are going to learn different kinds of species in nature that live\n        together to form amazing environment.\n      </InfoSubtitle>\n    </Info>\n  );\n}\n',InfoN01_stylesraw_namespaceObject='import { Theme } from "@mui/material/styles";\nimport { CSSObject } from "@mui/system";\nimport { InfoSlotStyles } from "../info-basic";\n\nexport const getInfoN01Styles = (\n  arg: Theme | { theme: Theme }\n): CSSObject & Partial<InfoSlotStyles> => {\n  const { palette } = "theme" in arg ? arg.theme : arg;\n  return {\n    eyebrow: {\n      textTransform: "uppercase",\n      color: palette.text.secondary,\n      letterSpacing: "1px",\n      fontSize: 12,\n      marginBottom: "0.875em",\n      display: "inline-block",\n    },\n    title: {\n      fontSize: 20,\n      fontWeight: "bold",\n      marginBottom: "0.4em",\n    },\n    subtitle: {\n      fontSize: 16,\n      color:\n        palette.mode === "dark" ? "rgba(255,255,255,0.72)" : "rgba(0,0,0,0.72)",\n    },\n  };\n};\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Info/N01"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone info-basic info-n01\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"infon01",children:"InfoN01"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:InfoN01raw_namespaceObject,language:"tsx"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"infon01stylests",children:"InfoN01.styles.ts"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:InfoN01_stylesraw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);