"use strict";(self.webpackChunkmui_treasury=self.webpackChunkmui_treasury||[]).push([[5404],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>MDXProvider,a:()=>useMDXComponents});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./blocks/navigation-basic/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const Navigationraw_namespaceObject='import React, { PropsWithChildren } from "react";\nimport { styled, Theme, useThemeProps } from "@mui/material/styles";\nimport { SxProps } from "@mui/system";\nimport cx from "clsx";\nimport { navigationClasses } from "./navigationClasses";\n\nexport type NavigationClassKey = keyof typeof navigationClasses;\nexport type NavigationClasses = Partial<typeof navigationClasses>;\nexport type NavigationProps = {\n  /**\n   * className append to the root element\n   */\n  className?: string;\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n} & Omit<JSX.IntrinsicElements["nav"], "ref">;\n\nconst NavigationRoot = styled("nav", {\n  name: "JunNavigation",\n  slot: "Root",\n  overridesResolver: (props, styles) => styles.root,\n})<{ ownerState: NavigationProps }>({\n  display: "flex",\n  overflow: "auto",\n  // Hide dimensionless scrollbar on MacOS\n  scrollbarWidth: "none", // Firefox\n  "&::-webkit-scrollbar": {\n    display: "none", // Safari + Chrome\n  },\n});\n\nexport const Navigation = React.forwardRef<\n  HTMLElement,\n  PropsWithChildren<NavigationProps>\n>(function Navigation({ children, ...inProps }, ref) {\n  const props = useThemeProps<Theme, NavigationProps, "JunNavigation">({\n    props: inProps,\n    name: "JunNavigation",\n  });\n  const { ...other } = props;\n\n  const ownerState = {\n    ...props,\n  };\n\n  return (\n    <NavigationRoot\n      ref={ref}\n      {...other}\n      ownerState={ownerState}\n      className={cx(navigationClasses.root, props.className)}\n    >\n      {children}\n    </NavigationRoot>\n  );\n});\n',navigationClassesraw_namespaceObject='import generateUtilityClass from "@mui/material/generateUtilityClass";\nimport generateUtilityClasses from "@mui/material/generateUtilityClasses";\n\nexport function getNavigationUtilityClass(slot: string) {\n  return generateUtilityClass("JunNavigation", slot);\n}\n\nexport const navigationClasses = generateUtilityClasses("JunNavigation", [\n  "root",\n  "item",\n]);\n',NavItemraw_namespaceObject='import React, { PropsWithChildren } from "react";\nimport cx from "clsx";\nimport { styled, useThemeProps, Theme, SxProps } from "@mui/material/styles";\nimport { navigationClasses } from "./navigationClasses";\nimport { OverridableComponent } from "@mui-treasury/types";\n\nexport type NavItemProps = {\n  /**\n   * If `true`, active style applied to the root element\n   * @default false\n   */\n  active?: boolean;\n\n  /**\n   * If `true`, element is disabled\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * className append to the root element\n   */\n  className?: string;\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n} & Omit<JSX.IntrinsicElements["a"], "ref">;\n\nconst NavItemRoot = styled("a", {\n  name: "JunNavigation",\n  slot: "Item",\n  overridesResolver: (props, styles) => {\n    const { ownerState } = props;\n    return [\n      styles.item,\n      ownerState.active && styles.itemActive,\n      ownerState.disabled && styles.itemDisabled,\n    ];\n  },\n})<{ ownerState: NavItemProps }>(\n  ({ theme: { palette, shape, spacing, typography } }) => ({\n    ...(typography.body1 as any),\n    fontWeight: 500,\n    flexShrink: 0,\n    display: "flex",\n    alignItems: "center",\n    color:\n      palette.mode === "dark"\n        ? "rgba(255,255,255,0.57)"\n        : palette.text.secondary,\n    position: "relative",\n    padding: spacing(1, 2),\n    borderRadius: shape.borderRadius,\n    cursor: "pointer",\n    textDecoration: "none",\n    transition: "0.2s ease-out",\n    "&:hover, &:focus": {\n      color: palette.mode === "dark" ? "#fff" : "rgba(0,0,0,0.72)",\n      outline: "none",\n    },\n    "&.Mui-active": {\n      color: palette.mode === "dark" ? "#fff" : palette.text.primary,\n    },\n    "&.Mui-disabled": {\n      color: palette.action.disabled,\n      pointerEvents: "none",\n    },\n  })\n);\n\nexport const NavItem: OverridableComponent<PropsWithChildren<NavItemProps>> =\n  React.forwardRef<HTMLAnchorElement, PropsWithChildren<NavItemProps>>(\n    function Navigation({ children, ...inProps }, ref) {\n      const props = useThemeProps<Theme, NavItemProps, "JunNavigation">({\n        props: inProps,\n        name: "JunNavigation",\n      });\n      const { active = false, disabled = false, ...other } = props;\n\n      const ownerState = {\n        ...props,\n        active,\n        disabled,\n      };\n\n      return (\n        <NavItemRoot\n          ref={ref}\n          {...other}\n          ownerState={ownerState}\n          className={cx(\n            navigationClasses.item,\n            active && "Mui-active",\n            disabled && "Mui-disabled",\n            props.className\n          )}\n        >\n          {children}\n        </NavItemRoot>\n      );\n    }\n  );\n';function _createMdxContent(props){const _components={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,lib.a)(),...props.components};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Navigation/Component"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx mui-treasury@latest clone navigation-basic\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"navigationbasic",children:"NavigationBasic"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:Navigationraw_namespaceObject,language:"tsx"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"navitemtsx",children:"NavItem.tsx"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:NavItemraw_namespaceObject,language:"tsx"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"navigationclassests",children:"navigationClasses.ts"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:navigationClassesraw_namespaceObject,language:"tsx"})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.a)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}}}]);